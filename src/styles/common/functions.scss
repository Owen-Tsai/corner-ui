@function color($color) {
  @return map-get($colors, $color);
}

// @function brightness($color) {
//   @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
// }

// @function color-contrast($color, $dark: $font-color-common, $light: #ffffff) {
//   @if $color == null {
//     @return null;
//   } @else {
//     $color-brightness: brightness($color);  
//     $light-text-brightness: brightness($light);
//     $dark-text-brightness: brightness($dark);
    
//     @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);  
//   }
// }

@function sqrt($r) {
  $x0: 1;
  $x1: $x0;

  @for $i from 1 through 10 {
      $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
      $x0: $x1;
  }

  @return $x1;
}

// Brightness math based on:
//   http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx

$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);

  // Convert to percentage and return
  @return 100% * $number / 255;
}

@function color-contrast($color, $light: #ffffff, $dark: $font-color-common) {
  @if brightness($color) < 75% {
    @return $light;
  } @else {
    @return $dark;
  }
}